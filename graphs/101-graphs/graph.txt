Graph is a collection of  nodes and are connected with one another but not in linear way. Binary tree can also be called a graph 

B---C
|   |
D---E
 |/
 F

Components
Vertex= Nodes are also called Vertex
Edges - Lines which connects two graphs are called edges. weights are also assigned to edges , if not we can assume a edge has 1 weigtht 

Graphs are used to represent networks, like `social networks`, `computer networks`, or `transportation systems`, where connections between points (nodes) can be complex and varied.

* Types of Graphs
# Undirected Graph - This  graph edges have no particular direction.s it can go back and forth
  A
/  \   The edge between A and B means A is connected to B and B is connected to A.
B---C

# Directed Graph = this graphs's edges have a direction, represented by arrows. This means the connection goes from one node to another specific node.

A
|     The arrow from A to B means A is connected to B, but not necessarily B to A.
v   
B--->C The arrow from B to C means B is connected to C, but not C to B.


# Cyclic and ACylic Graphs

B---->C    this is cylic graph as it has atleast one cycle, if we start from B->C->D->E->B 
|     |    hence cylic graph
|     v
E<--- D


  A        doesn't have any cycle ,hence  ACylic Graph
 /  \    
v    v  
B---->C 


# Disconnected Graphs
Not all Vertices should be connected in graphs  ,you might  have isloated or even separte graphs as well
  A       F  
/  \   D    
B---C  |
       E

# Connected Graphs 
The normal graphs where each node have atleast one edge is called connected graphs

#Complete Graph
When all nodes are connected to all other nodes, then we have a complete graph.



* Path -   Contain Lot of Adjacent Connected Nodes
1-->2      so 1,2,3,4 is  a path  , (1,2,4) not a path as they don't have a edge , 
    |      (1,2,3,5) path  , (1,2,3,2,1) not a path (no duplicates allowed)
    v
4<--3    
    |
    v
    5


* Degree - No of edges connected with
B---C      Like Degree(E) would be 3 as it has 3 edges , D(F)=2 , 
|   |
D---E
\   /
  F
Property- The no of total degrees of a graph is twice of the number of edges(For UnDirected Graph)
Edges 6 = D(B) 2, D(C) 2 , D(3), E(3), F(2)=12

This was for undirected graphs , for directed graphs , there are indegrees and outdegree 

B-->C       
    |         
    v
D<--E       INDEGREE IS FOR INCOMING EDGES   (E)=1  C-->E
    |       OUTDEGREE IS FOR OUTGOING EDGES  (E)=2 E->F and E->D 
    v
    F 


* Types of Graph Representations
To construct a graph , we will be given 'no of nodes' and  'no of edges' , and some data which tells how "nodes are connected"

so we store this  data and use this data in 2 ways
1) Adjacency Matrix
2) Adjacency List

# Adjaceny Matrix
So we use 2d matrix to show edges between nodes 
eg - let says we have to contruct a graph like this
 1
/  \    so no of nodes will be 3 , no of edges 3 and we will represent connection with 2d
2--3    matrix

so 1->2 connection is there and this is a 'undirected graph' hence 2->1  , therefore connections are (1->2),(2->1) ,(1->3),(3->1),(2->3),(3->2) 
  0 1  2  3
0             
1      a  c      (a,1,2)  (c,1,3)
2   b     e      (b,2,1)  (e,2,3)
3   d  f         (d,3,1)  (f,3,2)

in 2d matrix 1 is represented with connection and 0 means no connection (use of alphabet is done for better understanding)
if it was a 'directed graph' , it will only have undirectional flow (1->2),(1->3),(2->3) 

but this way  takes a lot of space , Imagine that you need to represent the Facebook network as a graph. You would have to create a matrix of 2 billion x 2 billion, where most of it would be empty! Nobody would know everybody else, just a few thousand at most.
so this way is not recommed 

# Adjaceny List
Here each  node will contain list of nodes it is connected to
 1
/  \    1->(2,3) , 2->(3,1) , 3->(2,1)
2--3    like 1 is connected with 2 and 3 in similar ways


#Connected Components
 1        4
/  \      |
2--3      5
this will still be called a graph if input suggests it like nodes=5 edges=4 and connections
(1-2) ,(1-3),(2-3), (4-5)
even if its brokendown in 2 parts ,these will be called components
These are 2 different components of a single graph 

Traversal in these nodes,will be different as these components are not connected ,so we will use "visited nodes" arr concept , so we start from 1-5 loop , and check if the node is visited or not , by default , all will be not visited , so 1's traversal will mark it visible also 2 and 3 , so next traversal will start from 4 


#Bipartite Graph
A Bipartite Graph is graph where we can color the graph with 2 colors so that no adjacent nodes can be of same color
Example,  2   3
         (C)-(E)
     1  /       \ 4
(A)-(B)          (G)-(H)-(I)   here you can assign each node a color with any of 2 color
       \  6    5/              so that no adjacent node can have same color
         (D)-(F)

So this is Bipartite Graph

          2 
Example, (C)
      1 /   \ 3
(A)-(B)      (G)-(H)-(I)   here it is not possible , so this is not a bipartite graph
      |5     4|              
      (D)---(F)


Linear Graph ,which has no cycles will always be Bipartite ,Graphs with cycles should have 
even no of nodes(even cycle length) to be Bipartite 